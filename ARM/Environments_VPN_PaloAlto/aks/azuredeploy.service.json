{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "name": {
            "defaultValue": "aksdefault",
            "type": "string",
            "metadata": {
                "description": "AKS cluster name"
            }
        },
        "kubernetesVersion": {
            "defaultValue": "1.18.10",
            "type": "string",
            "metadata": {
                "description": "Kubernetes version"
            }
        },
        "maxPods": {
            "defaultValue": 10,
            "type": "int",
            "metadata": {
                "description": "Min=10, AKS default=30, Max=250"
            }
        },
        "agentPoolProfiles": {
            "type": "array",
            "metadata": {
                "description": "Define one or multiple node pools"
            },
            "defaultValue": [
                {
                    "name": "nodepool1",
                    "nodeCount": 3,
                    "nodeVmSize": "Standard_B2ms",
                    "availabilityZones": [
                        "1",
                        "2",
                        "3"
                    ],
                    "osType": "Linux",
                    "enableAutoScaling": true,
                    "maxCount": 6,
                    "minCount": 3,
                    "mode": "System",
                    "nodeLabels": {
                        "environment": "devtest"
                    },
                    "nodeTaints": []
                }
            ]
        },
        "vnetResourceGroupName": {
            "type": "string",           
            "metadata": {
                "description": "Virtual Network resource group name"
            }
        },
        "vnetName": {
            "type": "string",           
            "metadata": {
                "description": "Virtual Network name"
            }
        },
        "vnetSubnetName": {
            "type": "string",
            "metadata": {
                "description": "Virtual Network subnet name"
            }
        },
        "controlPlaneSku": {
            "type": "string",
            "metadata": {
                "description": "Free or SLA covered control plane mode"
            },
            "allowedValues": [
                "Free",
                "Paid"
            ],
            "defaultValue": "Free"
        },
        "aksPolicy": {
            "type": "bool",
            "metadata": {
                "description": "Enable the AKS Azure Policy add-on"
            },
            "defaultValue": false
        },
        "adminGroups": {
            "type": "array",
            "metadata": {
                "description": "AAD group object ids which should be added to the Kubernetes cluster-admin role"
            },
            "defaultValue": [
                "eeda2af5-XXXXXXXXXXX-8ca1165066dc" // All Users
                ]
        },
        "ipWhitelist": {
            "type": "array",
            "metadata": {
                "description": "Whitelist IP address ranges from which you like to access the AKS API server endpoint"
            },
            "defaultValue": []
        },
        "privateCluster": {
            "type": "bool",
            "metadata": {
                "description": "Whether the AKS API server endpoint should have a private IP or public IP address"
            },
            "defaultValue": false
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": ""
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": ""
        }
    },
    "variables": {
        "clusterService": "Kubernetes",
        "clusterVersion": "1.16.10",
        "registryService": "ContainerRegistry",
        "registryName": "[replace(concat(parameters('name'), '-cr'), '-', '')]",
        "analyticsName": "[concat(parameters('name'), '-la')]",
        "apiVersion": {
            "aks": "2020-04-01",
            "rbac": "2020-04-01-preview",
            "deployments": "2020-06-01"
        },
        "agentPoolProfiles": {
            "vnetSubnetId": "[concat(resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('vnetName')), '/subnets/', parameters('vnetSubnetName'))]"
        },
        "cluster": {
            "acrId": "[resourceId(resourceGroup().name, 'Microsoft.ContainerRegistry/registries', variables('registryName'))]"
        },
        "outputs": {
            "resourceId": "[resourceId('Microsoft.ContainerService/managedClusters/' ,parameters('name'))]"
        }

    },
    "resources": [
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "name": "[variables('analyticsName')]",
            "apiVersion": "2015-11-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "sku": {
                    "name": "pergb2018"
                },
                "retentionInDays": 180
            }
        },
        {
            "name": "[variables('registryName')]",
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2017-10-01",
            "location": "[resourceGroup().location]",
            "tags": {
                "hidden-ServiceProvider": "[variables('registryService')]"
            },
            "sku": {
                "name": "Basic",
                "tier": "Basic"
            },
            "properties": {
                "adminUserEnabled": true
            },
            "resources": [
                {
                    "apiVersion": "[variables('apiVersion').rbac]",
                    "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', variables('registryName'))]"
                    ],
                    "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
                    "name": "[concat(variables('registryName'), '/Microsoft.Authorization/', guid(resourceGroup().id, parameters('name'), 'AcrPull'))]",
                    "properties": {
                        // AcrPull = 7f951dda-4ed3-4680-a7ca-43fe172d538d
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                        "principalId": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('name')), variables('apiVersion').aks).identityProfile.kubeletidentity.objectId]",
                        "scope": "[variables('cluster').acrId]"
                    }
                }
            ]
        },
        {
            "apiVersion": "[variables('apiVersion').aks]",
            "type": "Microsoft.ContainerService/managedClusters",
            "name": "[parameters('name')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "nodeResourceGroup": "[concat(parameters('name'), '-worker')]",
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "enableRBAC": true,
                "dnsPrefix": "[parameters('name')]",
                "addonProfiles": {
                    "kubeDashboard": {
                        "enabled": false
                    },
                    "omsagent": {
                        "enabled": true,
                        "config": {
                            "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('analyticsName'))]"
                        }
                    },
                    "azurepolicy": {
                        "enabled": "[parameters('aksPolicy')]",
                        "config": {
                            "version": "v2"
                        }
                    }
                },
                "copy": [
                    {
                        "name": "agentPoolProfiles",
                        "count": "[length(parameters('agentPoolProfiles'))]",
                        "input": {
                            "name": "[if(equals(parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].osType, 'Linux'), if(lessOrEquals(length(parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].name), 12), parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].name, substring(parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].name, 0, 12)), if(lessOrEquals(length(parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].name), 6), parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].name, substring(parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].name, 0, 6)))]",
                            "orchestratorVersion": "[parameters('kubernetesVersion')]",
                            "maxPods": "[parameters('maxPods')]",
                            "osDiskSizeGB": 128,
                            "count": "[parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].nodeCount]",
                            "vmSize": "[parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].nodeVmSize]",
                            "osType": "[parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].osType]",
                            "vnetSubnetID": "[variables('agentPoolProfiles').vnetSubnetId]",
                            "enableAutoScaling": "[if(parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].enableAutoScaling, parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].enableAutoScaling, json('null'))]",
                            "maxCount": "[if(parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].enableAutoScaling, parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].maxCount, json('null'))]",
                            "minCount": "[if(parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].enableAutoScaling, parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].minCount, json('null'))]",
                            "type": "VirtualMachineScaleSets",
                            "availabilityZones": "[parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].availabilityZones]",
                            "mode": "[parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].mode]",
                            "enableNodePublicIP": false,
                            "nodeLabels": "[parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].nodeLabels]",
                            "nodeTaints": "[parameters('agentPoolProfiles')[copyIndex('agentPoolProfiles')].nodeTaints]"
                        }
                    }
                ],
                "networkProfile": {
                    "loadBalancerSku": "standard",
                    "outboundType": "loadBalancer",
                    "networkPlugin": "azure",
                    "networkPolicy": "calico",
                    "serviceCidr": "172.16.0.0/16",
                    "dnsServiceIp": "172.16.0.10",
                    "dockerBridgeCidr": "172.17.0.1/16"
                },
                "aadProfile": {
                    "managed": true,
                    "adminGroupObjectIDs": "[parameters('adminGroups')]"
                },
                "apiServerAccessProfile": {
                    "authorizedIPRanges": "[if(parameters('privateCluster'), json('[]'), parameters('ipWhitelist'))]",
                    "enablePrivateCluster": "[parameters('privateCluster')]"
                }
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "sku": {
                "name": "Basic",
                "tier": "[parameters('controlPlaneSku')]"
            }
        },
        {
            "apiVersion": "[variables('apiVersion').rbac]",
            "type": "Microsoft.ContainerService/managedClusters/providers/roleAssignments",
            "name": "[concat(parameters('name'), '/Microsoft.Authorization/', guid(resourceGroup().id, parameters('name'), 'Monitoring Metrics Publisher'))]",
            "properties": {
                // Monitoring Metrics Publisher = 3913510d-42f4-4e42-8a64-420c390055eb
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                "principalId": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('name')), variables('apiVersion').aks, 'Full').identity.principalId]",
                "scope": "[variables('outputs').resourceId]"
            }
        },
        {          
            "apiVersion": "[variables('apiVersion').deployments]",
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(parameters('name'), '-vnet-subnet-rbac')]",
            "resourceGroup": "[parameters('vnetResourceGroupName')]",
            "dependsOn": [
                "[concat('Microsoft.ContainerService/managedClusters/', parameters('name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "apiVersion": "[variables('apiVersion').rbac]",
                            "type": "Microsoft.Network/virtualNetworks/subnets/providers/roleAssignments",
                            "name": "[concat(parameters('vnetName'), '/', parameters('vnetSubnetName'), '/Microsoft.Authorization/', guid(resourceGroup().id, parameters('name'), 'Network Contributor'))]",
                            "properties": {
                                // Network Contributor = 4d97b98b-1d4f-4787-a291-c67834d212e7
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                "principalId": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('name')), variables('apiVersion').aks, 'Full').identity.principalId]",
                                "scope": "[variables('agentPoolProfiles').vnetSubnetId]"
                            }
                        }
                    ],
                    "outputs": {}
                }
            }
        },
        {         
            "apiVersion": "[variables('apiVersion').deployments]",
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(parameters('name'), '-acr-rbac')]",
            "resourceGroup": "[resourceGroup().name]",
            "dependsOn": [
                "[concat('Microsoft.ContainerService/managedClusters/', parameters('name'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "apiVersion": "[variables('apiVersion').rbac]",
                            "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
                            "name": "[concat(variables('registryName'), '/Microsoft.Authorization/', guid(resourceGroup().id, parameters('name'), 'AcrPull'))]",
                            "properties": {
                                // AcrPull = 7f951dda-4ed3-4680-a7ca-43fe172d538d
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                                "principalId": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('name')), variables('apiVersion').aks).identityProfile.kubeletidentity.objectId]",
                                "scope": "[variables('cluster').acrId]"
                            }
                        }
                    ],
                    "outputs": {}
                }
            }
        }

    ],
    "outputs": {
        "name": {
          "type": "string",
          "value": "[parameters('name')]"
        },
        "resourceId": {
          "type": "string",
          "value": "[variables('outputs').resourceId]"
        }
    }
}